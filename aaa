local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local task = task

local player = Players.LocalPlayer

-- === Configurable (pero aquí uso getgenv().Number si existe) ===
getgenv().Number = getgenv().Number or 1000
local SUMMON_COUNT = tonumber(getgenv().Number) or 1000
local WAIT_AFTER_SUMMON = 10 -- segundos que esperas antes de checar la unidad
local UNIT_TARGET = "Bulm"   -- nombre/subcadena a buscar en el Scroll
local SCROLL_TIMEOUT = 8     -- segundos max esperando que exista Scroll
-- ================================================================

-- Helpers para obtener remotes
local function getRemote(pathRoot)
    local cur = ReplicatedStorage
    for _, name in ipairs(pathRoot) do
        cur = cur and cur:FindFirstChild(name)
        if not cur then return nil end
    end
    return cur
end

-- Obtener remotes (asumo las rutas que diste)
local settingsRemote = getRemote({"MainSharedFolder","Remotes","Settings"})
local summonRemote   = getRemote({"LobbyFolder","Remotes","Summon"})

if not settingsRemote then
    warn("No se encontró Settings remote en ReplicatedStorage.MainSharedFolder.Remotes.Settings")
else
    pcall(function()
        settingsRemote:FireServer("SFX Volume", "\237\190\140")
    end)
end

if not summonRemote then
    warn("No se encontró Summon remote en ReplicatedStorage.LobbyFolder.Remotes.Summon")
else
    local isEvent = summonRemote:IsA("RemoteEvent")
    local isFunc  = summonRemote:IsA("RemoteFunction")
    local summonArgs = {"Verse Banner", 1} -- según tu último ejemplo usabas 1 como cantidad

    for i = 1, SUMMON_COUNT do
        task.spawn(function()
            pcall(function()
                if isFunc then
                    summonRemote:InvokeServer(unpack(summonArgs))
                else
                    summonRemote:FireServer(unpack(summonArgs))
                end
            end)
        end)
    end
end

-- Esperar el tiempo que indicaste
task.wait(WAIT_AFTER_SUMMON)

-- Buscar Scroll de forma segura (con timeout)
local function getScrollWithTimeout(timeout)
    local start = os.clock()
    while os.clock() - start < (timeout or 0) do
        local gui = player and player:FindFirstChild("PlayerGui")
        if gui then
            local main = gui:FindFirstChild("MainScreenFolder")
            local shared = main and main:FindFirstChild("SharedSideScreen")
            local frames = shared and shared:FindFirstChild("Frames")
            local unitFrame = frames and frames:FindFirstChild("UnitFrame")
            local scroll = unitFrame and unitFrame:FindFirstChild("Scroll")
            if scroll then return scroll end
        end
        task.wait(0.2)
    end
    return nil
end

local scroll = getScrollWithTimeout(SCROLL_TIMEOUT)
if not scroll then
    warn("Scroll no encontrado en la GUI dentro del timeout. Teleportando...")
    pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end)
    return
end

-- Estrategias de búsqueda de unidad
local function findUnitInScroll(scroll, target)
    if not scroll then return nil end
    local lowTarget = tostring(target):lower()

    -- 1) match exacto por nombre
    local exact = scroll:FindFirstChild(target)
    if exact then return exact, "exact name" end

    -- 2) subcadena en el nombre (case-insensitive)
    for _, child in ipairs(scroll:GetChildren()) do
        if tostring(child.Name):lower():find(lowTarget, 1, true) then
            return child, "name substring"
        end
    end

    -- 3) buscar en Text de descendientes (TextLabel/TextButton/TextBox)
    for _, child in ipairs(scroll:GetChildren()) do
        for _, desc in ipairs(child:GetDescendants()) do
            if (desc:IsA("TextLabel") or desc:IsA("TextButton") or desc:IsA("TextBox")) and type(desc.Text) == "string" then
                if desc.Text:lower():find(lowTarget, 1, true) then
                    return child, "descendant text"
                end
            end
        end
    end

    return nil
end

local foundUnit, reason = findUnitInScroll(scroll, UNIT_TARGET)
if foundUnit then
    print(("Unidad encontrada: %s  (método: %s)"):format(foundUnit.Name, tostring(reason)))
    if settingsRemote then
        pcall(function()
            settingsRemote:FireServer("SFX Volume", 1)
        end)
    end
else
    warn("Unidad no encontrada. Teleportando a la misma instancia...")
    pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end)
end
