-- AutoRollMain.lua (LocalScript)
-- Coloca este LocalScript en StarterPlayerScripts y el ModuleScript AutoRollGui.lua en la misma carpeta.
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")
local player = Players.LocalPlayer

-- require GUI
local GuiModule = require(script:WaitForChild("AutoRollGui")) -- si lo pones en otro lado, ajusta la ruta
local gui = GuiModule.new(player)

-- carpeta donde están las unidades (igual que tu script original)
local folder = player:WaitForChild("PlayerGui"):WaitForChild("MainFrames"):WaitForChild("UnitFrame"):WaitForChild("ScrollingFrame")

-- estado
local selectedId = nil
local sending = false
local running = false
local interval = 0.1
local stopT = { Xenith = true, Fantasy = true }
local connA, connR, folderConn

-- Helper: detecta si la unidad tiene un trait que detiene
local function hasStop(u)
    if not u then return false end
    local t = u:FindFirstChild("Main") and u.Main:FindFirstChild("Main") and u.Main.Main:FindFirstChild("TraitIcons")
    return t and (t:FindFirstChild("Xenith",true) or t:FindFirstChild("Fantasy",true))
end

-- Attach watchers to selected unit's TraitIcons
local function attach()
    if connA then connA:Disconnect(); connA = nil end
    if connR then connR:Disconnect(); connR = nil end
    if not selectedId then sending = false return end

    local u = folder:FindFirstChild(selectedId)
    if not u then sending = false return end
    local t = u.Main and u.Main.Main and u.Main.Main.TraitIcons
    if not t then sending = false return end

    -- if unit already has stop trait, stop
    if hasStop(u) then
        sending = false
    else
        if running then sending = true end
    end

    connA = t.ChildAdded:Connect(function(c)
        if stopT[c.Name] then sending = false end
    end)
    connR = t.ChildRemoved:Connect(function()
        if not hasStop(u) and running then sending = true end
    end)
end

-- Refresh UI list
local function refreshList()
    -- clear current entries
    for _,c in ipairs(gui.unitList:GetChildren()) do
        if c:IsA("TextButton") then c:Destroy() end
    end

    -- create new entries
    for _,u in ipairs(folder:GetChildren()) do
        local nm = u:FindFirstChild("Main") and u.Main:FindFirstChild("Main") and u.Main.Main:FindFirstChild("UnitName")
        if nm then
            local display = u.Name .. " | " .. nm.Text
            local btn = gui:CreateUnitButton(u.Name, display)
            btn.MouseButton1Click:Connect(function()
                selectedId = u.Name
                gui.selectedLabel.Text = "Seleccionada: " .. display
                attach()
            end)
        end
    end
end

-- Conectar cambios en folder para refrescar
folder:GetPropertyChangedSignal("Parent") -- noop to ensure folder exists
folderConn = folder.ChildAdded:Connect(refreshList)
folder.ChildRemoved:Connect(function()
    if selectedId and not folder:FindFirstChild(selectedId) then
        selectedId = nil
        gui.selectedLabel.Text = "Seleccionada: Ninguna"
        attach()
    end
    refreshList()
end)

-- UI botones
gui.refreshBtn.MouseButton1Click:Connect(refreshList)
gui.closeBtn.MouseButton1Click:Connect(function() gui.screen.Enabled = false end)

-- Start/Stop UI button
gui.startBtn.MouseButton1Click:Connect(function()
    running = not running
    if running then
        gui.startBtn.Text = "⏸ Detener"
        gui.startBtn.BackgroundColor3 = Color3.fromRGB(180,80,60)
        if selectedId and not hasStop(folder:FindFirstChild(selectedId)) then sending = true end
    else
        gui.startBtn.Text = "▶ Iniciar"
        gui.startBtn.BackgroundColor3 = Color3.fromRGB(0,140,80)
        sending = false
    end
    gui.selectedLabel.Text = (running and "AutoRoll ON: " or "AutoRoll OFF: ") .. (selectedId or "Ninguna")
end)

-- Interval box handling
gui.intervalBox.FocusLost:Connect(function(enter)
    local txt = gui.intervalBox.Text
    local n = tonumber(txt)
    if n and n > 0.02 then
        interval = n
    else
        gui.intervalBox.Text = tostring(interval)
    end
end)

-- Hotkey T toggles running (mantengo tu hotkey original)
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.T then
        running = not running
        if running then
            gui.startBtn.Text = "⏸ Detener"
            gui.startBtn.BackgroundColor3 = Color3.fromRGB(180,80,60)
            if selectedId and not hasStop(folder:FindFirstChild(selectedId)) then sending = true end
        else
            gui.startBtn.Text = "▶ Iniciar"
            gui.startBtn.BackgroundColor3 = Color3.fromRGB(0,140,80)
            sending = false
        end
        gui.selectedLabel.Text = (running and "AutoRoll ON: " or "AutoRoll OFF: ") .. (selectedId or "Ninguna")
    end
end)

-- Core sending loop
task.spawn(function()
    while true do
        if running and sending and selectedId and ReplicatedStorage and ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("TraitReroll") then
            -- dispara el remote (igual que tu script original)
            pcall(function()
                ReplicatedStorage.Remotes.TraitReroll:FireServer("Token", "Trait", selectedId, "Confirm")
            end)
        end
        task.wait(interval)
    end
end)

-- Inicializa lista
refreshList()
